在這個目錄開啟CMD

輸入npm init來初始化專案（建立package.json檔）

一路enter

安裝套件：繼續輸入：npm i -g --save-dev webpack webpack-cli webpack-dev-server

結果有全域安裝，但test01目錄裡的package.json沒有devDependencies記錄，看來上面的--save-dev不需要了

再試一次安裝專案目錄：npm i --save-dev webpack webpack-cli webpack-dev-server

結果專案裡出現node_modules目錄，package.json的devDependencies也出現那三個套件了

那看網路教學說要全域安裝是為什麼呢？

（後來有看到有人說：webpack-dev-server是一個靜態資源伺服器，只用於開發環境，你需要在本機和全域安裝）

（再回來補充，後來換一台電腦run專案，結果html沒有hot reload，查了一下發現沒有全域的webpack，全域裝了webpack就好了）

現在有了打包工具和開發server

接下來開始安裝babel：npm i --save-dev @babel/core @babel/preset-env babel-loader

package.json裡也看到了

新增webpack.config.dev.js，內容先寫成這樣：

const path = require('path');

$	module.exports = {
$		mode: 'production',
$		devtool: 'source-map',
$		context: path.resolve(__dirname, 'src'),
$		entry: ['./assets/js/index.js'],
$		output: {
$			path: path.resolve(__dirname, 'dist'),
$			filename: 'assets/js/index.js'
$		},
$		module: {
$			rules: [
$				{
$					test: /\.js$/i,
$					exclude: /node_modules/,
$					use: {
$						loader: 'babel-loader',
$						options: {
$							presets: ['@babel/preset-env']
$						}
$					}
$				}
$			]
$		}
$	};

好緊張喔

新增src/assets/js目錄，再新增index.js，內容先寫成這樣：

$	var alertMsg = m => alert(m);
$	alertMsg(123456);

好緊張喔

新增dist目錄（不知道是不是必要？）

回去修改package.json，在scripts中加入"build": "webpack --config webpack.config.prod.js"

在CMD中輸入npm run build

太好了，dist目錄中確實出現了assets/js/index.js，而且看起來有編譯成ES5，但上面的範例看起來不太好，輸出的結果變成

$	alert(123456);
$	//# sourceMappingURL=index.js.map

alertMsg()直接不見了，我看來寫複雜一點好了，把index.js內容換成：

$	var adder = (n1, n2) => {
$		if(!n1){
$			throw new Error('n1 is required');
$		}
$		if(!n2){
$			throw new Error('n2 is required');
$		}
$		return n1+n2;
$	}
$	var muler = (n1, n2) => {
$		if(!n1){
$			throw new Error('n1 is required');
$		}
$		if(!n2){
$			throw new Error('n2 is required');
$		}
$		return n1*n2;
$	}
$	
$	alert(`the result is ${adder(1,2)+muler(1,2)}`);

來輸出，結果變成：

$	alert("the result is ".concat(5));
$	//# sourceMappingURL=index.js.map

.......無言...

再來建開發環境：新增webpack.config.dev.js，並加入內容：

$	const path = require('path');

$	module.exports = {
$		mode: 'development',
$		devtool: 'inline-source-map',
$		context: path.resolve(__dirname, 'src'),
$		devServer: {
$			contentBase: path.join(__dirname, 'dist'),
$			port: 9000,
$			hot: true,
$			open: true,
$			openPage: './index.html'
$		},
$		entry: ['./assets/js/index.js'],
$		output: {
$			path: path.resolve(__dirname, 'dist'),
$			filename: 'assets/js/index.js'
$		},
$		module: {
$			rules: [
$				{
$					test: /\.js$/i,
$					exclude: /node_modules/,
$					use: {
$						loader: 'babel-loader',
$						options: {
$							presets: ['@babel/preset-env']
$						}
$					}
$				}
$			]
$		}
$	};

在package.json的scripts中加入：

"watch": "webpack-dev-server --config webpack.config.dev.js",

執行npm run watch

結果報錯了，查了一下如果用webpack-cli 4或webpack 5，要把package.json scripts中的webpack-dev-server改成「webpack serve」也就是：

"watch": "webpack serve --config webpack.config.dev.js",

再執行一次npm run watch就好了

來修改一下index.js測試一下有沒有hot reload

成功

試試看一開始沒有dist資料夾然後執行npm run build

嗯，node.js會自己產生dist目錄

##########################################################################################################################

接下來安裝html-webpack-plugin，另外試試更新html檔時會hot reload嗎？

同樣執行：npm i --save-dev html-webpack-plugin

在webpack.config.prod.js及webpack.config.dev.js中加入下列語法：

$	const HtmlWebpackPlugin = require('html-webpack-plugin');
$	module.exports = {
$		 ..........
$		 ,
$		plugins: [
$			new HtmlWebpackPlugin({
$				filename: 'index.html',
$				template: './index.html',
$				inject: true
$			})
$		]
$	}

刪除dist中的所有內容

在scr目錄中新增index.html

$	<!DOCTYPE HTML>
$	<html>
$	<head>
$	<title>HTML5</title>
$	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
$	</head>
$	<body>
$	<h1>測試喔！</h1>
$	</body>
$	</html>

npm run watch看看

成功，現在記憶體中的index.js及index.html都能被瀏覽器執行了

但直接修改src的html檔不會hot reload，查了很久，一個比較好的做法就是將contentBase改成src，在devServer裡加入watchContentBase: true

我本來就覺得dev的contentBase要是src，但大部份的教學都指向dist，真是不太明白

實測後果然html有hot reload了

==========================================================================================================================
練習的目錄搬家了（放到github的ReactTest裡的website5），現在套件都沒了，所以再使用npm i安裝所有套件
==========================================================================================================================

來測試一下javascript模組：

新增一個myModule.js

輸入：

$	//先測CommonJS的Module
$	const myFN1 = (a) => console.log(a);
$	module.exports = myFN1;

然後在index.js輸入

$	//先測CommonJS的Module
$	const myFN1 = require('./myModule.js');
$	myFN1(111);

npm run watch就會看到111了

再改測試ES6的模組：

在myModule.js中輸入：

$	//再測試ES6的Module
$	export const myFN2 = (a) => console.log(a);
$	export default myFN2;

然後在index.js輸入

$	//測試ES6的Module
$	import myFN2 from './myModule.js'
$	myFN2(222);

npm run watch就會看到222了

PS，在測的過程發現CommonJS和ES6的寫法不能同時存在會報錯，用node.js就用CommonJS的寫法吧

##########################################################################################################################

現在來測試寫CSS

npm i --save-dev css-loader style-loader

新增目錄及css檔

/src/assets/css/default.css

隨便新增點內容：*{border: 1px solid red;}

編輯webpack.config.dev.js，加入：

rules: [
	{
		test: /\.css$/i,
		use: ['style-loader', 'css-loader']
	}
]

編輯index.js，加入：

import '../css/default.css'; //使用ESM方式引入，但後來試了一下寫成require('../css/default.css');也可以

npm run watch

成功了ㄟ！現在畫面都被畫上紅線了，但現在看html是直接插入<style>標籤

先不管<style>標籤這件事，先來測看看開發版是不是一樣加入標籤

編輯webpack.config.prod.js，加入：

rules: [
	{
		test: /\.css$/i,
		use: ['style-loader', 'css-loader']
	}
]

npm run build

去看了dist資料夾，結果一樣是插入<style>標籤，而且sourceMap也還是留著

先來讓default.css可以輸出實體檔案

看起來需要使用mini-css-extract-plugin

首先將style-loader解除安裝

npm un style-loader

再安裝mini-css-extract-plugin

npm i mini-css-extract-plugin -D

然後編輯webpack.config.dev.js：

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
...............
module.exports = {
	...............
	module: {
		rules: [
			{
				test: /\.css$/i,
				use: [MiniCssExtractPlugin.loader, 'css-loader']
			}
		]
	},
	plugins: [
		new MiniCssExtractPlugin(),
		...............
	]
}

npm run watch看看，覺得會有問題…

結果有成功ㄟ，來試一下輸出圖片

新增目錄：src\assets\css\img，並加入dora.png

在index.html中加入<div class="test"></div>

在default.css中加入

.test{
    width: 205px;
    height: 204px;
    background: url(img/dora.png) 50% 50% no-repeat;
}

npm run watch

網頁中看到哆拉A夢了

現在修改一下webpack.config.prod.js內容，把style-loader拔掉，另外加入mini-css-extract-plugin

npm run build

dist目錄中確實出現哆拉A夢的圖了，但是以亂數命名，之後再來看一下檔名怎麼設定

但現在看dist目錄中跟src目錄都不同，例如現在mini-css-extract-plugin產了一個main.css，可是我的檔名是及目錄是：assets/css/default.css

但使用開發工具看樣式來源確實是default.css，真是奇怪，應該是他預設產的map檔中的設定，來修改一下plugins那邊的參數好了

經過了一番研究，可以用chunk的方式將不同檔案分離出來，可以參考一下這個網址：

https://stackoverflow.com/questions/54267580/what-is-the-purpose-of-chunkfilename-of-mini-css-extract-plugin-module

然後試著去調整webpack.config.prod.js：

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
module.exports = {
	mode: 'production',
	//devtool: 'source-map',
	context: path.resolve(__dirname, 'src'),
	entry: ['./assets/js/index.js'],
	output: {
		path: path.resolve(__dirname, 'dist'),
		filename: 'assets/js/default.js'
	},
	module: {
		rules: [
			{
				test: /\.js$/i,
				exclude: /node_modules/,
				use: {
					loader: 'babel-loader',
					options: {
						presets: ['@babel/preset-env']
					}
				}
			},
			{
				test: /\.css$/i,
				use: [MiniCssExtractPlugin.loader, 'css-loader']
			}
		]
	},
	optimization: {
		splitChunks: {
			cacheGroups: {
				style1: {
					name: 'common',
					test: /common\.css$/,
					chunks: 'all',
					enforce: true
				},
				style2: {
					name: 'dora',
					test: /dora\.css$/,
					chunks: 'all',
					enforce: true
				}
			}
		}
	},
	plugins: [
		new MiniCssExtractPlugin({
			filename: 'assets/css/[name].css',
			chunkFilename: 'chunk-[id].css'
		}),
		new HtmlWebpackPlugin({
			filename: 'index.html',
			template: './index.html',
			inject: 'body'
		})
	]
};

然後src中新增dora.css

index.js中新增import '../css/page-dora.css';

npm run build

去看dist資料夾，如此輸出後就不會是main.css，而是成功拆成default.css及dora.css檔個檔

這樣的做法確實可以精準的得到輸出結果，但設定有夠麻煩，還是先不要這樣做好了（如果未來要需要把CSS分的這麼詳細也會是在不同頁面，而不同頁面只要設定不同的載入點再import不同的CSS就可以了）

所以先把webpack.config.prod.js的內容調回上一版

************* 這裡發現一個問題，在watch的時候只要css或js寫錯，例如語法錯，圖片連結錯誤，HMR會失效（瀏覽器就不會更新了），要再去找看哪裡出問題了 *************

現在先來解決圖檔位置的問題；因為現在哆拉A夢的圖會輸出在dist資料夾第一層，看起來很不爽，而且build起來的網頁html及js裡的路徑會抓不到正確的路徑

另外css-loader輸出的圖檔也都會變亂碼

應該是要使用file-loader來處理吧

安裝：npm install file-loader -D

然後設定webpack.config.prod.js，接著開始寫CSS的background-image

結果怎麼試都無法輸出正確的結果，圖檔有輸出我要的檔名，但同時在根目錄css-loader又輸出一個檔名亂碼的圖檔，然後這個亂碼圖檔還是壞的，CSS內的的url也使終指向這個壞掉的圖檔

查了非常多資料都沒用，卡了兩天真是令人沮喪，但不能放棄，偶然看到下面那一個網頁，裡面有人問檔案輸出的問題，順便就看了一下他的webpack-config設定

https://github.com/webpack-contrib/mini-css-extract-plugin/issues/691

結果他不用file-loader，他用了webpack自帶的asset模組，這個我之前也有這樣試過，但他多了filename的設定，試了他的filename設定一切都順暢了

{
	test: /\.(jpe?g|png|gif|svg)$/i,
	type: 'asset/resource',
	generator: {
		filename: '[path][name][ext]'
	}
}

不過我在CSS裡寫的是url(../img/dora.png)，打包後變成url(../../assets/img/dora.png)，而且不知道該怎麼調整，以後再來看這個問題吧

------------------------------------------------------------------------------------------------------

另外webpack的asset模組好像沒有outputPath以及publicPath可以設定，這樣要圖片要怎麼上CDN啊？以後再來看這個問題吧

（後來試了一下）

webpack.config.js加入：

const ASSET_PATH = process.env.ASSET_PATH || 'CDN/';

module.exports = (env, arg) => {
	...
	if (arg.mode === 'production') {
		config.output.publicPath = ASSET_PATH;
		...
	}
	...
}

npm run prod

可以看到輸出檔案內的<img>路徑、JS檔路徑、CSS檔路徑全被加上了「CDN/」，但樣式及程式都不見了

我們在dist中加入一個CDN的資料夾，並把assets搬進去，重整畫面就正常了

所以說config檔中的'CDN/'就可以換成CDN的網址，再把資源丟上去就可以吃CDN的路徑了

PS：如果只是在本機開發或是資源沒有要上CDN就可以寫成：const ASSET_PATH = process.env.ASSET_PATH || './';

如此就會吃相對路徑

------------------------------------------------------------------------------------------------------

現在來測javascript裡加入圖檔，在index.js裡輸入：

var nobiImg = new Image();
nobiImg.src = require('../img/nobi.png');
document.querySelector('body').appendChild(nobiImg);

npm run build

打開dist的網頁就會看到大雄的圖片了，但網址又更奇怪了：

<img src="file:///D:/github/ReactTest/website5-new-break-point/dist/assets/js/../../assets/img/nobi.png">

雖然可以看，但未來可能是個大問題

再來測html中加入圖片，在index.html中加入：

<img src="assets/img/gian.jpg" />

npm run build

打開dist的網頁發現圖片並沒有輸出，變成破圖了

解決方式：裝html-loader

npm install --save-dev html-loader

調整webpack.config.prod.js：

rules: [
	{
		test: /\.html$/i,
		loader: "html-loader",
	}
]

npm run build

打包檔出現技安的圖片了

關於前面發現路徑很奇怪的事，在webpack.config.prod.js中調整publicPath可以得到稍微的改善，有兩個要調整的地方：

1. module.exports.output.publicPath <= 這個指的是所有資源最前面的公開路徑，例如「http://www.some-cdn.com/」或是「./」的相對路徑

2. MiniCssExtractPlugin的options.publicPath <= 這個指的是我們存放檔案的目錄路徑，例如「assets/img」，或是「../」的相對路徑

webpack.config.prod.js設定方式：

const ASSET_PATH = process.env.ASSET_PATH || './';

module.exports = {
	.....
	output: {
		.....
		publicPath: ASSET_PATH
	},
	module: {
		rules: [
			.....
			{
				test: /\.css$/i,
				exclude: /node_modules/,
				use: [
					{
						loader: MiniCssExtractPlugin.loader,
						options: {
							publicPath: '../../'
						}
					}, 'css-loader'
				]
			}
		]
	}
}

npm run build

開啟index.html後可以看到html中的圖片路徑都變成：
<img src="./assets/img/gian.jpg">
<img src="./assets/img/nobi.png">

看起來比較舒服了，但CSS中的路徑還是稍微怪怪的（但還能接受啦）：

background: url(../../assets/css/img/dora.png) 50% 50% no-repeat;

////////

前面做了這麼多打包的測試，一直產出dist又要一直刪，實在麻煩，使用clean-webpack-plugin吧

先保留之前打包的dist資料夾不要刪掉

npm install --save-dev clean-webpack-plugin

webpack.config.prod.js中加入：

const {CleanWebpackPlugin} = require('clean-webpack-plugin');
.....
plugins: [
	new CleanWebpackPlugin(),
	.....
]

然後把index.html中的<img src="assets/img/gian.jpg" />註解掉

npm run build

然後去看dist\assets\img中的技安圖就不見了

##########################################################################################################################

前面都在搞上線版的webpack config檔，現在回來完善一下開發版的config檔吧

改了幾個地方大概記錄一下：

module.exports.devServer的設定在webpack5有點不一樣了，更新寫法
MiniCssExtractPlugin加入publicPath
加入webpack的asset模組來載入圖檔
加入html-loader
plugin的MiniCssExtractPlugin加入filename設定

另外測一下編輯html內容可以直接HMR

另外測一下index.js裡寫錯語法HMR也不會斷掉了，而且webpack直接把錯誤印在瀏覽器畫面上了

先把改完的內容貼到下面：

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
	mode: 'development',
	devtool: 'inline-source-map',
	context: path.resolve(__dirname, 'src'),
	devServer: {
		static: {
			directory: path.join(__dirname, 'src'),
			watch: true,
		},
		port: 9000,
		hot: true,
		open: 'index.html'
	},
	entry: ['./assets/js/index.js'],
	output: {
		path: path.resolve(__dirname, 'dist'),
		filename: 'assets/js/default.js'
	},
	module: {
		rules: [
			{
				test: /\.js$/i,
				exclude: /node_modules/,
				use: {
					loader: 'babel-loader',
					options: {
						presets: ['@babel/preset-env']
					}
				}
			},
			{
				test: /\.css$/i,
				exclude: /node_modules/,
				use: [
					{
						loader: MiniCssExtractPlugin.loader,
						options: {
							publicPath: '../../'
						}
					}, 'css-loader'
				]
			},
			{
				test: /\.(jpe?g|png|gif|svg)$/i,
				exclude: /node_modules/,
				type: 'asset/resource',
				generator: {
					filename: '[path][name][ext]'
				}
			},
			{
				test: /\.html$/i,
				loader: 'html-loader'
			}
		]
	},
	plugins: [
		new MiniCssExtractPlugin({
			filename: 'assets/css/[name].css'
		}),
		new HtmlWebpackPlugin({
			filename: 'index.html',
			template: './index.html',
			inject: 'body'
		})
	]
};

----------------------------------------------------------
補一下webpack-dev-server設定：

devServer: {
	static: {
		directory: path.join(__dirname, 'src'),
		watch: true,
	},
	host: 'local-ip', //直接用本機的IP開啟頁面
	port: 9000,
	hot: true,
	open: 'index.html'
}

host指定為local-ip，這個IP可以在同一個IP的不同裝置開啟網頁，例如同一個wifi網路，電腦熱點，非常方便

----------------------------------------------------------
補一下webpack devtool（javascript的sourcemap設定）的設定：
參考：https://webpack.js.org/configuration/devtool/#development

//開發：
module.exports = {
	devtool: 'eval-cheap-module-source-map'
};

//上線1：
module.exports = {
	devtool: 'source-map' //輸出完整的source-map
};

//上線2：
module.exports = {
	devtool: 'none' //效能最好 //不寫devtool好像就是none了
};

----------------------------------------------------------
補一下css-loader、sass-loader的map設定：
{
	loader: 'css-loader',
	options: {
		sourceMap: true
	}
},
{
	loader: 'sass-loader',
	options: {
		sourceMap: true
	}
}

##########################################################################################################################

來寫Sass吧

npm install sass-loader node-sass -D

修改webpack.config.prod.js及webpack.config.dev.js

將default.css改成default.scss

修改default.scss內容：

$btnColor: #0060ce;
.btn{
	.....
	background: $btnColor;
	.....
}

index.js中將default.css改成default.scss

npm run watch

成功，去改default.scss也有HMR

npm run build

成功，打包正常

不過發現一個問題，prod打包的網頁html碼會變成一整排跟dev不一樣，這造成一個問題，html碼有換行的時候會出現空格，html元素display成inline-block時樣式會有問題

去改HtmlWebpackPlugin的參數，加入minify: false

plugins: [
	new HtmlWebpackPlugin({
		.....
		minify: false
	})
]

官方文件說：true if mode is 'production', otherwise false

npm run build

打包後的html文件沒有不會壓縮成一行了

##########################################################################################################################

來寫css前綴

去default.scss和page-dora.css裡加一些CSS3或是很新的樣式，像是display:flex;、filter:blur(1px);、appearance:none;之類的

npm install autoprefixer postcss-loader --save-dev

修改webpack.config.prod.js及webpack.config.dev.js：

{
	test: /\.(sass|scss|css)$/i,
	exclude: /node_modules/,
	use: [
		{
			loader: MiniCssExtractPlugin.loader,
			options: {
				publicPath: '../../'
			}
		},
		'css-loader',
		'sass-loader',
		{
			loader: 'postcss-loader',
			options: {
				postcssOptions: {
					plugins: [
						'autoprefixer'
					]
				}
			}
		}
	]
}

npm install --save-dev browserslist

修改package.json：

{
	.....
	"browserslist": [
		"last 2 version",
		"> 1%",
		"IE 10"
	]
}

npm run build 或是 npm run watch

在瀏覽器中觀察像是display:flex;就會變成：

display: -webkit-box;
display: -ms-flexbox;
display: flex;

##########################################################################################################################
 
突然發現commonJS的require不能用了！

是很奇怪，回去看myFN1、myFN2的module居然壞了，查了半天也跟峯誠討論，結果發現：


■ 輸出commonJS，輸入commonJS：
---------------------------------------
const myFN1 = (a) => console.log(a);
module.exports = myFN1;

const myFN1 = require('./myModule.js');
myFN1(111111111111);

//合理正常


■ 輸出commonJS，輸入ES6：
---------------------------------------
const myFN1 = (a) => console.log(a);
module.exports = myFN1;

import myFN1 from './myModule.js'
myFN1(11111111111);

//奇怪沒有壞ㄟ，之前記得不能這樣用啊…


■ 輸出ES6，輸入ES6：
---------------------------------------
export const myFN1 = (a) => console.log(a);
export default myFN1;

import myFN1 from './myModule.js'
myFN1(11111111111);

//正常


■ 輸出ES6，輸入commonJS：
---------------------------------------
export const myFN1 = (a) => console.log(a);
export default myFN1;

const myFN1 = require('./myModule.js').default;
myFN1(111111111111);

//峯誠google到的，說在後面加一個.default居然就可以用了


結論是我可能眼花，用到輸出ES6，輸入commonJS這個搭配

##########################################################################################################################

babel功能補充：

關於轉譯ES6的設定還是有很多學問，現在只記錄一下設定的結果，功能及其它細節就先不寫了。

之前是用@babel/polyfill，但有更新的package且功能更完成就先不用了，改用@babel/runtime

npm install @babel/plugin-transform-runtime --save-dev

npm install --save @babel/runtime-corejs3

config檔設定：

rules: [
	{
		test: /\.js$/i,
		exclude: /node_modules/,
		use: {
			loader: 'babel-loader',
			options: {
				presets: ['@babel/preset-env'],
				plugins: [
					[
						"@babel/plugin-transform-runtime",
						{
							corejs: false
						}
					]
				]
			}
		}
	}
]

index.js中加入：

let myPromise = new Promise(function(myResolve, myReject) {
	let x = 0;
	if (x == 0) {
		myResolve("Promise OK的啦！");
	} else {
		myReject("Error");
	}
});
myPromise.then(
	function(v) {console.log(v);},
	function(e) {console.log(e);}
);

npm run build

console裡看到「Promise OK的啦！」就代表所有的ES新語法都被轉譯了，包含語法、js api等等

參考資料：https://awdr74100.github.io/2020-03-16-webpack-babelloader/

##########################################################################################################################

來把輸出的頁面跟資源分開：

新增如下的檔案：
src/index.ejs(原本的index.html改檔名)
src/page.ejs
src/css/common.scss
src/css/index.css(好像本來就有)
src/css/pages.css
src/js/common.js
src/js/index.js
src/js/page.js

把index.js中import的css檔移除

使用webpack的chunk功能，修改entry和output的設定：

entry: {
	index: ['./assets/js/common.js', './assets/js/index.js', './assets/css/common.scss', './assets/css/index.css'],
	page: ['./assets/js/common.js', './assets/js/page.js', './assets/css/common.scss', './assets/css/page.css']
},
output: {
	.....
	filename: 'assets/js/[name].js'
}

修改HtmlWebpackPlugin的設定：

plugins: [
	.....
	new HtmlWebpackPlugin({
		chunks: ['index'],
		title: '這是首頁',
		meta: {
			'viewport': 'width=device-width, initial-scale=1.0',
			'og:title': {property: 'og:title', content: '這是首頁的og:title'}
		},
		template: './index.ejs',
		filename: 'index.html',
		inject: 'body',
		minify: false
	}),
	new HtmlWebpackPlugin({
		chunks: ['page'],
		title: '內頁',
		meta: {
			'viewport': 'width=device-width, initial-scale=1.0',
			'og:title': {property: 'og:title', content: '這是內頁的og:title'}
		},
		template: './page.ejs',
		filename: 'page.html',
		inject: 'body',
		minify: false
	})
]

npm run build

去看打包的檔案，輸出檔案內容如下：

index.html
page.html
[assets]
	[css]
		index.css
		page.css
		[img]
			dora.png
	[img]
		nobi.png
	[js]
		index.js
		page.js

我們可以發現common.js和index.js整合成了index.js，common.js和page.js整合成了page.js，CSS的部份也一樣

使用瀏覽器開啟頁面就可以看到index.html和page.html裡的資源也很好的分開了，title及meta資料也被設定了，我唯一美中不足就是common.js和common.css無法單獨被抽出來

回去看一下index.ejs；為什麼要改副檔名呢？因為設定title要使字ejs模版語言，頁面中的title要寫成<title><%= htmlWebpackPlugin.options.title %></title>

原本是不用改副檔名的，但慶陽查到如果有裝html-loader就要改副檔名才有用

以上的設定雖然有點多，但習慣就好，另要config.dev.js也要做相同的設定，好像要把正式跟開發的config檔整合在一起比較理想

不過！！！突然發現gian.jpg不見了！是不是因為html-loader不認得.ejs的檔案？？

先把.ejs改回.html

npm run build

果然就好了…那個<title>還是自己手動下好了，不然用.ejs檔裡面的<img>還要寫成<img src="<%= require('./img/kolfiber.jpg') %>">，也太痛苦

##########################################################################################################################

https://awdr74100.github.io/2020-04-06-webpack-splitchunksplugin/

上面那個教學說：

當我們使用 Webpack 進行打包時，相關的 npm 套件也會通通被打包進 bundle.js 內，但這樣的行為對效能來說是較不友善的，
原因為 bundle.js 實在是太肥大了，正確的作法應該是將 node_modules 內的模組單獨打包成一個檔案，避免載入時間過長的問題。

但目前我覺得好像沒有遇到太「肥大」的問題，就先不管了吧

-----------------------------------------------

補充：

https://awdr74100.github.io/2020-04-13-webpack-vueloader/

教學的作者另一篇有個範例，看起來好像是他慣用的設定，先記在這邊（不過我用的webpack版本比較新設定也許會有些許不同）：

optimization: {
	runtimeChunk: {
		name: 'manifest',
	},
	splitChunks: {
		cacheGroups: {
			vendors: {
				test: /[\\/]node_modules[\\/]/,
				chunks: 'all',
				name: 'vendors',
				enforce: true,
			},
			default: false,
		}
	}
}

作者：

配置 SplitChunksPlugin 將 node_modules 內的套件抽離成獨立檔案
配置 runtimeChunk 將 Webpack 運行時代碼抽離成獨立檔案

-----------------------------------------------

後來發現：

後來在做react環境的時候發現react會被包到js檔裡，如果專案中有兩個頁面載入不同js檔，這兩個js檔同時都有載入react時，輸出的檔案就會有重複的react內容

後來加入了上方的優化設定，確實輸出的js檔變的很小，並且多了共用的vendors.js，看來在不同頁面中有使用共同模組（套件）時確實很有用

##########################################################################################################################

將開發及上線的設定整合為一個webpack.config.js

先調整package.json：

"scripts": {
  "dev": "webpack serve --config webpack.config.js --mode=development",
  "prod": "webpack --config webpack.config.js --mode=production"
},

把原本的watch改成dev、build改成prod了，然後把本來在config檔內module.exports的mode移到scripts裡

然後移除webpack.config.dev.js、webpack.config.prod.js

新增webpack.config.js，其內容為：

$	const path = require('path');
$	const ASSET_PATH = process.env.ASSET_PATH || './';
$	const HtmlWebpackPlugin = require('html-webpack-plugin');
$	const MiniCssExtractPlugin = require('mini-css-extract-plugin');
$	const {CleanWebpackPlugin} = require('clean-webpack-plugin');
$	
$	var config = {
$		context: path.resolve(__dirname, 'src'),
$		entry: {
$			index: ['./assets/js/common.js', './assets/js/index.js', './assets/css/common.scss', './assets/css/index.css'],
$			page: ['./assets/js/common.js', './assets/js/page.js', './assets/css/common.scss', './assets/css/page.css']
$		},
$		output: {
$			path: path.resolve(__dirname, 'dist'),
$			filename: 'assets/js/[name].js'
$		},
$		module: {
$			rules: [
$				{
$					test: /\.js$/i,
$					exclude: /node_modules/,
$					use: {
$						loader: 'babel-loader',
$						options: {
$							presets: ['@babel/preset-env'],
$							plugins: [
$								[
$									"@babel/plugin-transform-runtime",
$									{
$										corejs: 3
$									}
$								]
$							]
$						}
$					}
$				},
$				{
$					test: /\.(sass|scss|css)$/i,
$					exclude: /node_modules/,
$					use: [
$						{
$							loader: MiniCssExtractPlugin.loader,
$							options: {
$								publicPath: '../../'
$							}
$						},
$						{
$							loader: 'css-loader',
$							options: {
$								sourceMap: true
$							}
$						},
$						{
$							loader: 'sass-loader',
$							options: {
$								sourceMap: true
$							}
$						},
$						{
$							loader: 'postcss-loader',
$							options: {
$								postcssOptions: {
$									plugins: [
$										'autoprefixer'
$									]
$								}
$							}
$						}
$					]
$				},
$				{
$					test: /\.(jpe?g|png|gif|svg)$/i,
$					exclude: /node_modules/,
$					type: 'asset/resource',
$					generator: {
$						filename: '[path][name][ext]'
$					}
$				},
$				{
$					test: /\.html$/i,
$					loader: 'html-loader'
$				}
$			]
$		},
$		plugins: [
$			new MiniCssExtractPlugin({
$				filename: 'assets/css/[name].css'
$			}),
$			new HtmlWebpackPlugin({
$				chunks: ['index'],
$				title: '這是首頁',
$				meta: {
$					'viewport': 'width=device-width, initial-scale=1.0',
$					'og:title': {property: 'og:title', content: '這是首頁的og:title'}
$				},
$				template: './index.html',
$				filename: 'index.html',
$				inject: 'body',
$				minify: false
$			}),
$			new HtmlWebpackPlugin({
$				chunks: ['page'],
$				title: '內頁',
$				meta: {
$					'viewport': 'width=device-width, initial-scale=1.0',
$					'og:title': {property: 'og:title', content: '這是內頁的og:title'}
$				},
$				template: './page.html',
$				filename: 'page.html',
$				inject: 'body',
$				minify: false
$			})
$		]
$	};
$	
$	module.exports = (env, arg) => {
$		if (arg.mode === 'development') {
$			config.devServer = {
$				static: {
$					directory: path.join(__dirname, 'src'),
$					watch: true,
$				},
$				host: 'local-ip',
$				port: 9000,
$				hot: true,
$				open: 'index.html'
$			}
$			config.devtool = 'eval-cheap-module-source-map';
$		}
$	
$		if (arg.mode === 'production') {
$			config.output.publicPath = ASSET_PATH;
$			config.plugins.push(new CleanWebpackPlugin());
$		}
$	
$		return config;
$	}

把原本module.exports的內容移到一個config的變數裡，然後在module.exports導出一個函式，這個函式在調用時可傳入兩個參數：

env：環境變數，現在沒有在用就不去查資料了

arg：描述傳遞給webpack選項的物件，其中一個key就是development或是production

接下來就可使用第二個參數來判斷開發及上線版將config變數做不同的設定

最後再return config變數

npm run dev / npm run prod <= 都可以正常開啟dev server或是打包網頁，這樣config檔就整潔多了！

##########################################################################################################################

建立React的開發環境

npm install react react-dom --save

npm install @babel/preset-react --save-dev

修改webpack.config.js：

rules: [
	{
		test: /\.(js|jsx)$/i,
		exclude: /node_modules/,
		use: {
			loader: 'babel-loader',
			options: {
				presets: ['@babel/preset-react', '@babel/preset-env'],
				plugins: [
					[
						"@babel/plugin-transform-runtime",
						{
							corejs: 3
						}
					]
				]
			}
		}
	}
]

修改index.html：

加入<div id="root"></div>

新增App.jsx，內容為：

import React from 'react';
import ReactDOM from 'react-dom';
let App = <h2>text from App.jsx</h2>
ReactDOM.render(
	App,
	document.getElementById('root')
);

修改index.js：

import App from './App.jsx'

npm run dev / npm run prod <= 成功使用react框架

看了一下index.js變的很大，應該是塞了react的程式

----------------------------------------------

不過發現一個問題，用IE9、IE10開啟會報錯說 'Set'未定義…，react就不能用了

查了一下，找不到專門說明這個問題的文章；

有的人說裝@babel/polyfill，但babel官網說這個套件已棄用，改用core-js

npm install --save core-js

修改webpack.config.js，把下方語法註解掉：

/* plugins: [
	[
		"@babel/plugin-transform-runtime",
		{
			corejs: 3
		}
	]
] */

在App.jsx的最前面加入：

import "core-js/stable";
import "regenerator-runtime/runtime";

npm run prod

用IE9開啟打包後的檔案就可以看了，不過index.js變的更大了，目前先這樣解吧

----------------------------------------------

試試在react中插入圖片

let App = <div style={{
		backgroundImage: `url(${require('../css/img/bg.png')})`,
		backgroundColor: '#fff'
	}}>
	<h2>text from App.jsx</h2>
	<img src={require('../img/react.png')} />
</div>;

就用require()吧

##########################################################################################################################

基本的開發環境差不多這樣了；來開新專案復習react