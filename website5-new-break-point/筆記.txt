在這個目錄開啟CMD

輸入npm init來初始化專案（建立package.json檔）

一路enter

安裝套件：繼續輸入：npm i -g --save-dev webpack webpack-cli webpack-dev-server

結果有全域安裝，但test01目錄裡的package.json沒有devDependencies記錄，看來上面的--save-dev不需要了

再試一次安裝專案目錄：npm i --save-dev webpack webpack-cli webpack-dev-server

結果專案裡出現node_modules目錄，package.json的devDependencies也出現那三個套件了

那看網路教學說要全域安裝是為什麼呢？

（後來有看到有人說：webpack-dev-server是一個靜態資源伺服器，只用於開發環境，你需要在本機和全域安裝）

現在有了打包工具和開發server

接下來開始安裝bable：npm i --save-dev @babel/core @babel/preset-env babel-loader

package.json裡也看到了

新增webpack.config.dev.js，內容先寫成這樣：

const path = require('path');

$	module.exports = {
$		mode: 'production',
$		devtool: 'source-map',
$		context: path.resolve(__dirname, 'src'),
$		entry: ['./assets/js/index.js'],
$		output: {
$			path: path.resolve(__dirname, 'dist'),
$			filename: 'assets/js/index.js'
$		},
$		module: {
$			rules: [
$				{
$					test: /\.js$/i,
$					exclude: /node_modules/,
$					use: {
$						loader: 'babel-loader',
$						options: {
$							presets: ['@babel/preset-env']
$						}
$					}
$				}
$			]
$		}
$	};

好緊張喔

新增src/assets/js目錄，再新增index.js，內容先寫成這樣：

$	var alertMsg = m => alert(m);
$	alertMsg(123456);

好緊張喔

新增dist目錄（不知道是不是必要？）

回去修改package.json，在scripts中加入"build": "webpack --config webpack.config.prod.js"

在CMD中輸入npm run build

太好了，dist目錄中確實出現了assets/js/index.js，而且看起來有編譯成ES5，但上面的範例看起來不太好，輸出的結果變成

$	alert(123456);
$	//# sourceMappingURL=index.js.map

alertMsg()直接不見了，我看來寫複雜一點好了，把index.js內容換成：

$	var adder = (n1, n2) => {
$		if(!n1){
$			throw new Error('n1 is required');
$		}
$		if(!n2){
$			throw new Error('n2 is required');
$		}
$		return n1+n2;
$	}
$	var muler = (n1, n2) => {
$		if(!n1){
$			throw new Error('n1 is required');
$		}
$		if(!n2){
$			throw new Error('n2 is required');
$		}
$		return n1*n2;
$	}
$	
$	alert(`the result is ${adder(1,2)+muler(1,2)}`);

來輸出，結果變成：

$	alert("the result is ".concat(5));
$	//# sourceMappingURL=index.js.map

.......無言...

再來建開發環境：新增webpack.config.dev.js，並加入內容：

const path = require('path');

$	module.exports = {
$		mode: 'development',
$		devtool: 'inline-source-map',
$		context: path.resolve(__dirname, 'src'),
$		devServer: {
$			contentBase: path.join(__dirname, 'dist'),
$			port: 9000,
$			hot: true,
$			open: true,
$			openPage: './index.html'
$		},
$		entry: ['./assets/js/index.js'],
$		output: {
$			path: path.resolve(__dirname, 'dist'),
$			filename: 'assets/js/index.js'
$		},
$		module: {
$			rules: [
$				{
$					test: /\.js$/i,
$					exclude: /node_modules/,
$					use: {
$						loader: 'babel-loader',
$						options: {
$							presets: ['@babel/preset-env']
$						}
$					}
$				}
$			]
$		}
$	};

在package.json的scripts中加入：

"watch": "webpack-dev-server --config webpack.config.dev.js",

執行npm run watch

結果報錯了，查了一下如果用webpack-cli 4或webpack 5，要把package.json scripts中的webpack-dev-server改成「webpack serve」也就是：

"watch": "webpack serve --config webpack.config.dev.js",

再執行一次npm run watch就好了

來修改一下index.js測試一下有沒有hot reload

成功

試試看一開始沒有dist資料夾然後執行npm run build

嗯，node.js會自己產生dist目錄

##########################################################################################################################

接下來安裝html-webpack-plugin，另外試試更新html檔時會hot reload嗎？

同樣執行：npm i --save-dev html-webpack-plugin

在webpack.config.prod.js及webpack.config.dev.js中加入下列語法：

$	const HtmlWebpackPlugin = require('html-webpack-plugin');
$	module.exports = {
$		 ..........
$		 ,
$		plugins: [
$			new HtmlWebpackPlugin({
$				filename: 'index.html',
$				template: './index.html',
$				inject: true
$			})
$		]
$	}

刪除dist中的所有內容

在scr目錄中新增index.html

$	<!DOCTYPE HTML>
$	<html>
$	<head>
$	<title>HTML5</title>
$	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
$	</head>
$	<body>
$	<h1>測試喔！</h1>
$	</body>
$	</html>

npm run watch看看

成功，現在記憶體中的index.js及index.html都能被瀏覽器執行了

但直接修改src的html檔不會hot reload，查了很久，一個比較好的做法就是將contentBase改成src，在devServer裡加入watchContentBase: true

我本來就覺得dev的contentBase要是src，但大部份的教學都指向dist，真是不太明白

實測後果然html有hot reload了

==========================================================================================================================
練習的目錄搬家了（放到github的ReactTest裡的website5），現在套件都沒了，所以再使用npm i安裝所有套件
==========================================================================================================================

來測試一下javascript模組：

新增一個myModule.js

輸入：

$	//先測CommonJS的Module
$	const myFN1 = (a) => console.log(a);
$	module.exports = myFN1;

然後在index.js輸入

$	//先測CommonJS的Module
$	const myFN1 = require('./myModule.js');
$	myFN1(111);

npm run watch就會看到111了

再改測試ES6的模組：

在myModule.js中輸入：

$	//再測試ES6的Module
$	export const myFN2 = (a) => console.log(a);
$	export default myFN2;

然後在index.js輸入

$	//測試ES6的Module
$	import myFN2 from './myModule.js'
$	myFN2(222);

npm run watch就會看到222了

PS，在測的過程發現CommonJS和ES6的寫法不能同時存在會報錯，用node.js就用CommonJS的寫法吧

##########################################################################################################################

現在來測試寫CSS

npm i --save-dev css-loader style-loader

新增目錄及css檔

/src/assets/css/default.css

隨便新增點內容：*{border: 1px solid red;}

編輯webpack.config.dev.js，加入：

rules: [
	{
		test: /\.css$/i,
		use: ['style-loader', 'css-loader']
	}
]

編輯index.js，加入：

import '../css/default.css'; //看來寫成require('../css/default.css');也可以

npm run watch

成功了ㄟ！現在畫面都被畫上紅線了，但現在看html是直接插入<style>標籤

先不管<style>標籤這件事，先來測看看開發版是不是一樣加入標籤

編輯webpack.config.prod.js，加入：

rules: [
	{
		test: /\.css$/i,
		use: ['style-loader', 'css-loader']
	}
]

npm run build

去看了dist資料夾，結果一樣是插入<style>標籤，而且sourceMap也還是留著

先來讓default.css可以輸出實體檔案

看起來需要使用mini-css-extract-plugin

首先將style-loader解除安裝

npm un style-loader

再安裝mini-css-extract-plugin

npm i mini-css-extract-plugin -D

然後編輯webpack.config.dev.js：

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
...............
module.exports = {
	...............
	module: {
		rules: [
			{
				test: /\.css$/i,
				use: [MiniCssExtractPlugin.loader, 'css-loader']
			}
		]
	},
	plugins: [
		new MiniCssExtractPlugin(),
		...............
	]
}

npm run watch看看，覺得會有問題…

結果有成功ㄟ，但他產了一個main.css，可是我的檔名是及目錄是：assets/css/default.css，反正plugins那邊有參數可以設定，先來看下面這個連結

https://awdr74100.github.io/2020-03-02-webpack-minicssextractplugin/